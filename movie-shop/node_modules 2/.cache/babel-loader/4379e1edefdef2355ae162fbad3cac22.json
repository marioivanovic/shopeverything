{"ast":null,"code":"import axios from \"axios\";\nconst instance = axios.create({\n  withCredentials: true,\n  baseURL: process.env.REACT_APP_BACKEND_URL\n});\ninstance.interceptors.request.use(config => {\n  // Ce code est exécuté avant l'envoi de chaque requête axios\n  // important : on configure le type des entêtes en JSON\n  config.headers[\"Content-Type\"] = \"application/json\"; // on essaie de récupérer le token d'auth dans le local storage\n  // READ THE DOC : https://jwt.io/\n\n  const localAuthToken = window.localStorage.getItem(tokenName); // console.log(\"auth token ? >>> \", localAuthToken);\n  // si le token JWT existe, on l'envoie dans l'entête (header) de chaque requête HTTP partant vers le backend\n  // READ THE DOC : https://developer.mozilla.org/fr/docs/Web/HTTP/Headers\n\n  if (localAuthToken) config.headers[\"x-authenticate\"] = localAuthToken; // la clé de l'entête\n  // si le token est absent, le serveur rejettera la requête entrante sur les routes protégées ...\n\n  return config;\n}, error => {\n  // Do something with request error...\n  return Promise.reject(error);\n});\nexport default instance;","map":{"version":3,"sources":["/Users/marioivanovic/Desktop/CDA_java_Aulnay/week_2/back/projet_ecommerce/online-shop/movie-shop/src/utils/api.js"],"names":["axios","instance","create","withCredentials","baseURL","process","env","REACT_APP_BACKEND_URL","interceptors","request","use","config","headers","localAuthToken","window","localStorage","getItem","tokenName","error","Promise","reject"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC1BC,EAAAA,eAAe,EAAE,IADS;AAE1BC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAFK,CAAb,CAAjB;AAIAN,QAAQ,CAACO,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CACKC,MAAD,IAAY;AACR;AACA;AACAA,EAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiC,kBAAjC,CAHQ,CAKR;AACA;;AACA,QAAMC,cAAc,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BC,SAA5B,CAAvB,CAPQ,CAQR;AAEA;AACA;;AACA,MAAIJ,cAAJ,EAAoBF,MAAM,CAACC,OAAP,CAAe,gBAAf,IAAmCC,cAAnC,CAZZ,CAY+D;AACvE;;AACA,SAAOF,MAAP;AACH,CAhBL,EAiBKO,KAAD,IAAW;AACP;AACA,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CApBL;AAuBA,eAAejB,QAAf","sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n    withCredentials: true,\n    baseURL: process.env.REACT_APP_BACKEND_URL,\n});\ninstance.interceptors.request.use(\n    (config) => {\n        // Ce code est exécuté avant l'envoi de chaque requête axios\n        // important : on configure le type des entêtes en JSON\n        config.headers[\"Content-Type\"] = \"application/json\";\n\n        // on essaie de récupérer le token d'auth dans le local storage\n        // READ THE DOC : https://jwt.io/\n        const localAuthToken = window.localStorage.getItem(tokenName);\n        // console.log(\"auth token ? >>> \", localAuthToken);\n\n        // si le token JWT existe, on l'envoie dans l'entête (header) de chaque requête HTTP partant vers le backend\n        // READ THE DOC : https://developer.mozilla.org/fr/docs/Web/HTTP/Headers\n        if (localAuthToken) config.headers[\"x-authenticate\"] = localAuthToken; // la clé de l'entête\n        // si le token est absent, le serveur rejettera la requête entrante sur les routes protégées ...\n        return config;\n    },\n    (error) => {\n        // Do something with request error...\n        return Promise.reject(error);\n    }\n);\n\nexport default instance;\n"]},"metadata":{},"sourceType":"module"}